# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: target/share/firmware/build.sh
# Copyright (C) 2004 - 2008 The T2 SDE Project
# 
# More information can be found in the files COPYING and README.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License. A copy of the
# GNU General Public License can be found in the file COPYING.
# --- T2-COPYRIGHT-NOTE-END ---
#
#Description: firmware

. $base/misc/target/functions.in

set -e

. target/share/initramfs/build.sh

# set firmware preparation directory
imagelocation="$build_toolchain/firmware"

# cylinder size in bytes (16 heads x 63 sectors/track x 512 bytes/sector)
cylinder_size="516096"
sectors_per_cylinder="1008"
block_pad="1024"

echo "Preparing firmware image from build result ..."
rm -rf $imagelocation{,.img}
mkdir -p $imagelocation ; cd $imagelocation
mkdir root_stage
mkdir root_stage/boot
mkdir root_stage/boot/grub
mkdir root_stage/conf
cp ../initramfs/conf.default/config.generic-pc.xml root_stage/conf/config.xml
mkdir offload_stage
mkdir offload_stage/asterisk
mkdir offload_stage/kernel-modules
mkdir loop

echo "Copy system into staging directories ..."
cp ../../usr/lib/grub/i386-t2/stage{1,2} root_stage/boot/grub/
cp ../../../../target/share/firmware/menu.lst root_stage/boot/grub/
cp ../../boot/vmlinuz root_stage/boot/
cp ../initramfs.igz root_stage/boot/
cp -Rp ../../offload/asterisk/* offload_stage/asterisk/
cp -Rp ../../lib/modules/* offload_stage/kernel-modules/
ln -s /var/asterisk/run/astdb offload_stage/asterisk/astdb

echo "Cleaning away stray files ..."
find ./ -type f -name "._*" -print -delete

echo "Root partition size calculation ..."
root_size=`du -B512 -s root_stage | cut -f 1`
root_size=`expr $root_size + $block_pad`
echo "   = $root_size sectors"

echo "Offload partition size calculation ..."
offload_size=`du -B512 -s offload_stage | cut -f 1`
offload_size=`expr $offload_size + $block_pad`
echo "   = $offload_size sectors"

echo "Total image size calculation ..."
total_sector_count=`expr $root_size + $offload_size + 1`
echo "   = $total_sector_count sectors"

echo "Writing a binary container for the disk image ..."
dd if=/dev/zero of=firmware.img bs=512 count=$total_sector_count


cyls_needed=`expr $total_sector_count / $sectors_per_cylinder + 1`
echo "Cylinders needed = $total_sector_count sectors / $sectors_per_cylinder sectors-per-cyl + 1 = $cyls_needed"
offload_start_sector=`expr $root_size + 1`

echo "Partition the disk image ..."
sfdisk -C$cyls_needed -S63 -H16 -uS -f -L --no-reread firmware.img << EOF
1,$root_size,83,*
$offload_start_sector,$offload_size,83
;
;
EOF

echo "Formatting and populating partitions ..."
dd if=/dev/zero of=part1.img bs=512 count=$root_size
mke2fs -m0 -F part1.img
tune2fs -c0 part1.img
mount -o loop part1.img loop
cp -Rp root_stage/* loop/
umount loop

dd if=/dev/zero of=part2.img bs=512 count=$offload_size
mke2fs -m0 -F part2.img
tune2fs -c0 part2.img
mount -o loop part2.img loop
cp -Rp offload_stage/* loop/
umount loop

dd if=part1.img of=firmware.img bs=512 seek=1
dd if=part2.img of=firmware.img bs=512 seek=$offload_start_sector


echo "Install grub onto the image ..."
echo "device (hd0) firmware.img
geometry (hd0) $cyls_needed 16 63
root (hd0,0)
setup (hd0)
quit

" | grub --device-map=/dev/null --batch --no-pager --no-floppy --no-curses

gzip -9 firmware.img
mv firmware.img.gz ../$SDECFG_ID.img
