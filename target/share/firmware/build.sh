# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: target/share/firmware/build.sh
# Copyright (C) 2004 - 2008 The T2 SDE Project
# 
# More information can be found in the files COPYING and README.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License. A copy of the
# GNU General Public License can be found in the file COPYING.
# --- T2-COPYRIGHT-NOTE-END ---
#
#Description: firmware

. $base/misc/target/functions.in

set -e

# set initramfs preparation directory and build
build_root="$base/build/$SDECFG_ID"
build_toolchain="$base/build/$SDECFG_ID/TOOLCHAIN"
imagelocation="$build_toolchain/initramfs"
. target/share/initramfs/build.sh

# set firmware preparation directory
imagelocation="$build_toolchain/firmware"

# cylinder size in bytes (16 heads x 63 sectors/track x 512 bytes/sector)
cylinder_size="516096"
sectors_per_cylinder="1008"
block_pad="2048"

echo "Preparing firmware image from build result ..."
rm -rf $imagelocation{,.img}
mkdir -p $imagelocation ; cd $imagelocation
mkdir root_stage
mkdir root_stage/boot
mkdir root_stage/boot/grub
mkdir root_stage/conf
cp $base/target/$target/config.xml root_stage/conf/config.xml
mkdir offload_stage
mkdir offload_stage/asterisk
mkdir offload_stage/kernel-modules
mkdir loop

echo "Copy system into staging directories ..."
cp ../../usr/lib/grub/i386-t2/stage{1,2} root_stage/boot/grub/
cp ../../../../target/share/firmware/menu.lst root_stage/boot/grub/
cp ../../boot/vmlinuz root_stage/boot/
cp ../initramfs.igz root_stage/boot/
cp -Rp ../../offload/asterisk/* offload_stage/asterisk/
cp -Rp ../../lib/modules/* offload_stage/kernel-modules/
ln -s /var/asterisk/run/astdb offload_stage/asterisk/astdb
ln -s /offload/asterisk/sounds/en-us offload_stage/asterisk/sounds/en

echo "Cleaning up asterisk sounds ..."
rmdir offload_stage/asterisk/sounds/{es,fr}
find offload_stage/asterisk/sounds/ -type f -name "*.pdf" -print -delete
find offload_stage/asterisk/sounds/ -type f -name "*.txt" -print -delete
for FILE in `find offload_stage/asterisk/sounds/ -name *g711u`
do
NEW=`echo $FILE | sed -e 's/g711u/ulaw/'`
mv "$FILE" "$NEW"
done

echo "Cleaning away stray files ..."
find ./ -type f -name "._*" -print -delete

echo "Root partition size calculation ..."
root_size=`du -B512 -s root_stage | cut -f 1`
root_size=`expr $root_size + $block_pad`
echo "   = $root_size sectors"

echo "Offload partition size calculation ..."
offload_size=`du -B512 -s offload_stage | cut -f 1`
offload_size=`expr $offload_size + $block_pad`
echo "   = $offload_size sectors"

echo "Total image size calculation ..."
total_sector_count=`expr $root_size + $offload_size + 1`
echo "   = $total_sector_count sectors"

echo "Writing a binary container for the disk image ..."
dd if=/dev/zero of=firmware.img bs=512 count=$total_sector_count


cyls_needed=`expr $total_sector_count / $sectors_per_cylinder + 1`
echo "Cylinders needed = $total_sector_count sectors / $sectors_per_cylinder sectors-per-cyl + 1 = $cyls_needed"
offload_start_sector=`expr $root_size + 1`

echo "Partition the disk image ..."
sfdisk -C$cyls_needed -S63 -H16 -uS -f -D --no-reread firmware.img << EOF
1,$root_size,6,*
$offload_start_sector,$offload_size,83
;
;
EOF


echo "Formatting and populating partitions ..."
echo " - part1 - dd..."
dd if=/dev/zero of=part1.img bs=512 count=$root_size
echo " - part1 - losetup..."
losetup /dev/loop0 part1.img
echo " - part1 - mkfs.vfat..."
mkfs.vfat -n system /dev/loop0
echo " - part1 - mount..."
mount -t msdos /dev/loop0 loop
echo " - part1 - cp root_stage..."
cp -Rp root_stage/* loop/
echo " - part1 - unmount..."
umount /dev/loop0
echo " - part1 - losetup -d..."
losetup -d /dev/loop0

echo " - part2 - dd..."
dd if=/dev/zero of=part2.img bs=512 count=$offload_size
echo " - part2 - mke2fs..."
mke2fs -m0 -L offload -F part2.img
echo " - part2 - tune2fs..."
tune2fs -c0 part2.img
echo " - part2 - mount..."
mount -o loop part2.img loop
echo " - part2 - cp offload_stage..."
cp -Rp offload_stage/* loop/
echo " - part2 - umount..."
umount loop

echo " - dd part1 -> firmware.img..."
dd if=part1.img of=firmware.img bs=512 seek=1
echo " - dd part2 -> firmware.img..."
dd if=part2.img of=firmware.img bs=512 seek=$offload_start_sector


echo "Install grub onto the image ..."
echo "device (hd0) firmware.img
geometry (hd0) $cyls_needed 16 63
root (hd0,0)
setup (hd0)
quit

" | grub --device-map=/dev/null --batch --no-pager --no-floppy --no-curses

gzip -9 firmware.img
mv firmware.img.gz ../$SDECFG_ID.img
