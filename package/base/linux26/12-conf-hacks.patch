# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: package/.../linux26/12-conf-hacks.patch
# Copyright (C) 2004 - 2008 The T2 SDE Project
# Copyright (C) 1998 - 2003 ROCK Linux Project
# 
# More information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# --- T2-COPYRIGHT-NOTE-END ---

Set all unset options to module. Needed by the T2 SDE Linux kernel
auto configuration.

Initally written by Clifford Wolf <clifford@clifford.at> and adapted
for various new 2.5/2.6 kernels by Rene Rebe <rene@exactcode.de>.
 
diff -ur linux-2.6.27/scripts/kconfig/conf.c linux-2.6.27.work/scripts/kconfig/conf.c
--- linux-2.6.27/scripts/kconfig/conf.c	2008-10-10 00:13:53.000000000 +0200
+++ linux-2.6.27.work/scripts/kconfig/conf.c	2008-10-19 14:39:10.000000000 +0200
@@ -26,6 +26,7 @@
 	oldconfig,
 	allnoconfig,
 	allyesconfig,
+	no2modconfig,
 	allmodconfig,
 	alldefconfig,
 	randconfig,
@@ -448,6 +449,7 @@
 	{"savedefconfig",   required_argument, NULL, savedefconfig},
 	{"allnoconfig",     no_argument,       NULL, allnoconfig},
 	{"allyesconfig",    no_argument,       NULL, allyesconfig},
+	{"no2modconfig",    no_argument,       NULL, no2modconfig},
 	{"allmodconfig",    no_argument,       NULL, allmodconfig},
 	{"alldefconfig",    no_argument,       NULL, alldefconfig},
 	{"randconfig",      no_argument,       NULL, randconfig},
@@ -559,6 +561,9 @@
 		else if (!stat("all.config", &tmpstat))
 			conf_read_simple("all.config", S_DEF_USER);
 		break;
+	case no2modconfig:
+		conf_read_simple(".config", S_DEF_USER);
+		break;
 	default:
 		break;
 	}
@@ -582,6 +587,9 @@
 	case allyesconfig:
 		conf_set_all_new_symbols(def_yes);
 		break;
+	case no2modconfig:
+		conf_set_all_new_symbols(def_no2mod);
+		break;
 	case allmodconfig:
 		conf_set_all_new_symbols(def_mod);
 		break;
diff -ur linux-2.6.27/scripts/kconfig/lkc.h linux-2.6.27.work/scripts/kconfig/lkc.h
--- linux-2.6.27/scripts/kconfig/lkc.h	2008-10-10 00:13:53.000000000 +0200
+++ linux-2.6.27.work/scripts/kconfig/lkc.h	2008-10-19 14:14:59.000000000 +0200
@@ -46,6 +46,7 @@
 	def_default,
 	def_yes,
 	def_mod,
+	def_no2mod,
 	def_no,
 	def_random
 };
diff -ur linux-2.6.27/scripts/kconfig/Makefile linux-2.6.27.work/scripts/kconfig/Makefile
--- linux-2.6.27/scripts/kconfig/Makefile	2008-10-10 00:13:53.000000000 +0200
+++ linux-2.6.27.work/scripts/kconfig/Makefile	2008-10-19 14:14:59.000000000 +0200
@@ -3,7 +3,7 @@
 # These targets are used from top-level makefile
 
 PHONY += oldconfig xconfig gconfig menuconfig config silentoldconfig update-po-config \
-	localmodconfig localyesconfig
+	localmodconfig localyesconfig no2modconfig
 
 ifdef KBUILD_KCONFIG
 Kconfig := $(KBUILD_KCONFIG)
@@ -108,6 +108,9 @@
 savedefconfig: $(obj)/conf
 	$< --$@=defconfig $(Kconfig)
 
+no2modconfig: scripts/kconfig/conf
+	$< --$@ $(Kconfig)
+
 defconfig: $(obj)/conf
 ifeq ($(KBUILD_DEFCONFIG),)
 	$< --defconfig $(Kconfig)
@@ -135,6 +138,7 @@
 	@echo  '  allnoconfig	  - New config where all options are answered with no'
 	@echo  '  allyesconfig	  - New config where all options are accepted with yes'
 	@echo  '  allmodconfig	  - New config selecting modules when possible'
+	@echo  '  no2modconfig    - New config selecting modules for disabled options'
 	@echo  '  alldefconfig    - New config with all symbols set to default'
 	@echo  '  randconfig	  - New config with random answer to all options'
 	@echo  '  listnewconfig   - List new options'
--- linux-2.6.27.vanilla/scripts/kconfig/confdata.c	2008-10-10 00:13:53.000000000 +0200
+++ linux-2.6.27/scripts/kconfig/confdata.c	2008-10-20 12:45:07.000000000 +0200
@@ -824,6 +824,17 @@
 	for_all_symbols(i, sym) {
 		if (sym_has_value(sym))
 			continue;
+		if ((mode == def_no2mod) && (sym_get_type(sym) == S_TRISTATE)) {
+			if (sym_get_tristate_value(sym) == no)
+				fprintf(stderr, "Setting %s to 'm'.\n", sym->name);
+			if (sym_get_tristate_value(sym) == mod)
+				fprintf(stderr, "Keep %s as 'm'.\n", sym->name);
+			if (sym_get_tristate_value(sym) != yes)
+				sym->def[S_DEF_USER].tri = mod;
+			if (!sym_is_choice(sym))
+				sym->flags |= SYMBOL_DEF_USER;
+			continue;
+		}
 		switch (sym_get_type(sym)) {
 		case S_BOOLEAN:
 		case S_TRISTATE:
